package mocks

import (
	"context"
	"errors"
	"net/http"
	"net/http/httptest"
	"sync"
	"time"

	"github.com/rs/zerolog/log"
	"github.com/stretchr/testify/mock"
	"github.com/vkr-mtuci/gitlab-service/internal/adapter"
)

// MockGitLabClient - –º–æ–∫-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ GitLab
type MockGitLabClient struct {
	mock.Mock
}

// MockGitLabServer - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –º–æ–∫-—Å–µ—Ä–≤–µ—Ä–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
type MockGitLabServer struct {
	*httptest.Server
	mu        sync.Mutex
	responses map[string]mockResponse
}

// mockResponse - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ API
type mockResponse struct {
	status int
	body   string
}

// GetEnvironments - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
func (m *MockGitLabClient) GetEnvironments(ctx context.Context) ([]adapter.Environment, error) {
	return []adapter.Environment{
		{ID: 1, Name: "staging"},
		{ID: 2, Name: "production"},
	}, nil
}

// GetEnvironmentDetails - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
func (m *MockGitLabClient) GetEnvironmentDetails(ctx context.Context, environmentID string) (*adapter.DeploymentInfo, error) {
	if environmentID == "1" {
		return &adapter.DeploymentInfo{
			EnvironmentName: "staging",
			DeploymentDate:  "2024-02-10T12:00:00Z",
			PipelineID:      101,
			PipelineURL:     "https://gitlab.example.com/pipelines/101",
			JobID:           201,
			JobURL:          "https://gitlab.example.com/jobs/201",
			DeployStatus:    "success",
			BuildVersion:    "1.2.3",
		}, nil
	}
	return nil, errors.New("environment not found")
}

// GetPreviousPipelineSHA - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç SHA –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
func (m *MockGitLabClient) GetPreviousPipelineSHA(ctx context.Context, ref, currentSHA string) (string, error) {
	if currentSHA == "sha-123" {
		return "sha-122", nil
	}
	return "", errors.New("previous SHA not found")
}

// GetCommitsBetweenSHAs - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã –º–µ–∂–¥—É SHA
func (m *MockGitLabClient) GetCommitsBetweenSHAs(ctx context.Context, ref, fromSHA, toSHA string) ([]adapter.CommitInfo, error) {
	if fromSHA == "sha-122" && toSHA == "sha-123" {
		return []adapter.CommitInfo{
			{
				ID:          "commit-1",
				CreatedAt:   "2025-02-06T12:34:56Z",
				Message:     "Fix bug JIRA-123",
				AuthorName:  "Test User",
				AuthorEmail: "test@example.com",
				WebURL:      "https://gitlab.example.com/commit/commit-1",
				JiraKeys:    []string{"JIRA-123"},
			},
			{
				ID:          "commit-2",
				CreatedAt:   "2025-02-06T12:40:56Z",
				Message:     "Feature added JIRA-456",
				AuthorName:  "Dev Tester",
				AuthorEmail: "dev@example.com",
				WebURL:      "https://gitlab.example.com/commit/commit-2",
				JiraKeys:    []string{"JIRA-456"},
			},
		}, nil
	}
	return nil, errors.New("no commits found")
}

// GetPipelineJobs - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∂–æ–±—ã –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞
func (m *MockGitLabClient) GetPipelineJobs(ctx context.Context, pipelineID string) ([]adapter.JobInfo, error) {
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∂–æ–±—ã —Å–æ stage=deploy
	if pipelineID == "9679696" {
		finishedAt1, _ := time.Parse(time.RFC3339, "2025-02-06T12:40:56Z")
		finishedAt2, _ := time.Parse(time.RFC3339, "2025-02-06T12:50:10Z")
		return []adapter.JobInfo{
			{
				ID:         1001,
				Stand:      "deploy to production",
				Stage:      "deploy",
				Status:     "success",
				WebURL:     "https://gitlab.example.com/job/101",
				FinishedAt: finishedAt1,
			},
			{
				ID:         1002,
				Stand:      "deploy to staging",
				Stage:      "deploy",
				Status:     "failed",
				WebURL:     "https://gitlab.example.com/job/102",
				FinishedAt: finishedAt2,
			},
		}, nil
	}
	return nil, errors.New("‚ùå –î–∂–æ–±—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è pipelineID=" + pipelineID)
}

// NewMockGitLabServer —Å–æ–∑–¥–∞—ë—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —ç–º—É–ª–∏—Ä—É–µ—Ç GitLab API
func NewMockGitLabServer() *MockGitLabServer {
	mock := &MockGitLabServer{
		responses: make(map[string]mockResponse),
	}

	handler := http.NewServeMux()

	// ‚úÖ –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ GET /projects/:id/jobs/:job_id/trace
	handler.HandleFunc("/api/v4/projects/1/jobs/201/trace", func(w http.ResponseWriter, r *http.Request) {
		log.Debug().Msg("üì° –ó–∞–ø—Ä–æ—Å –ª–æ–≥–æ–≤ job 201")

		mock.mu.Lock()
		resp, exists := mock.responses["/api/v4/projects/1/jobs/201/trace"]
		mock.mu.Unlock()

		if exists {
			w.WriteHeader(resp.status)
			w.Write([]byte(resp.body))
			return
		}

		// ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å BUILD_VERSION
		w.WriteHeader(http.StatusOK)
		_, _ = w.Write([]byte(`BUILD_VERSION=1.2.3`))
	})

	// ‚úÖ –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ GET /projects/:id/repository/commits?ref_name=develop
	handler.HandleFunc("/api/v4/projects/1/repository/commits", func(w http.ResponseWriter, r *http.Request) {
		ref := r.URL.Query().Get("ref_name")
		log.Debug().Msgf("üì° –ó–∞–ø—Ä–æ—Å –∫–æ–º–º–∏—Ç–æ–≤ —Å ref_name=%s", ref)

		if ref == "develop" {
			log.Info().Msg("‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º 3 –∫–æ–º–º–∏—Ç–∞")
			w.WriteHeader(http.StatusOK)
			_, _ = w.Write([]byte(`[
				{"id": "commit-1", "message": "Fix bug JIRA-123", "author_name": "Test User", "author_email": "test@example.com", "created_at": "2025-02-06T12:34:56Z", "web_url": "https://gitlab.example.com/commit/commit-1"},
				{"id": "commit-2", "message": "Feature added JIRA-456", "author_name": "Dev Tester", "author_email": "dev@example.com", "created_at": "2025-02-06T12:30:00Z", "web_url": "https://gitlab.example.com/commit/commit-2"},
				{"id": "commit-3", "message": "Feature added JIRA-789", "author_name": "Dev Tester", "author_email": "dev@example.com", "created_at": "2025-02-06T12:25:00Z", "web_url": "https://gitlab.example.com/commit/commit-3"}
			]`))
			return
		}
		w.WriteHeader(http.StatusOK)
		_, _ = w.Write([]byte(`[]`))
	})

	// ‚úÖ –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ GET /projects/:id/pipelines
	handler.HandleFunc("/api/v4/projects/1/pipelines", func(w http.ResponseWriter, r *http.Request) {
		ref := r.URL.Query().Get("ref")
		if ref == "develop" {
			w.WriteHeader(http.StatusOK)
			_, _ = w.Write([]byte(`[{"id": 1001, "sha": "sha-123"}, {"id": 1000, "sha": "sha-122"}]`))
			return
		}
		w.WriteHeader(http.StatusOK)
		_, _ = w.Write([]byte(`[]`))
	})

	// ‚úÖ –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ GET /projects/:id/environments
	handler.HandleFunc("/api/v4/projects/1/environments", func(w http.ResponseWriter, r *http.Request) {
		log.Debug().Msg("üì° –ó–∞–ø—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏–π")

		// üî• –ï—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —á–µ—Ä–µ–∑ SetErrorResponse, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ!
		mock.mu.Lock()
		resp, exists := mock.responses["/api/v4/projects/1/environments"]
		mock.mu.Unlock()

		if exists {
			w.WriteHeader(resp.status)
			w.Write([]byte(resp.body))
			return
		}

		// ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –Ω–µ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω
		w.WriteHeader(http.StatusOK)
		_, _ = w.Write([]byte(`[
			{"id": 1, "name": "staging"},
			{"id": 2, "name": "production"}
		]`))
	})

	// ‚úÖ –ú–æ–∫–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ GET /projects/:id/environments/:env_id
	handler.HandleFunc("/api/v4/projects/1/environments/1", func(w http.ResponseWriter, r *http.Request) {
		log.Debug().Msg("üì° –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—é 1")

		// üî• –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ SetErrorResponse, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
		mock.mu.Lock()
		resp, exists := mock.responses["/api/v4/projects/1/environments/1"]
		mock.mu.Unlock()

		if exists {
			w.WriteHeader(resp.status)
			w.Write([]byte(resp.body))
			return
		}

		// ‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
		w.WriteHeader(http.StatusOK)
		_, _ = w.Write([]byte(`{
			"id": 1, "name": "staging", "external_url": "https://staging.example.com", "created_at": "2024-02-10T12:00:00Z",
			"last_deployment": {
				"created_at": "2024-02-11T10:00:00Z", "ref": "main", "sha": "abc123",
				"deployable": {"id": 201, "web_url": "https://gitlab.example.com/jobs/201", "status": "success",
					"pipeline": {"id": 101, "web_url": "https://gitlab.example.com/pipelines/101"}
				}
			}
		}`))
	})

	// ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è jobs
	handler.HandleFunc("/api/v4/projects/1/pipelines/6/jobs", func(w http.ResponseWriter, r *http.Request) {
		log.Debug().Msg("üì° –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –¥–∂–æ–± –¥–ª—è –ø–∞–π–ø–ª–∞–π–Ω–∞ 6")

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç
		mock.mu.Lock()
		resp, exists := mock.responses[r.URL.Path]
		mock.mu.Unlock()

		if exists {
			w.WriteHeader(resp.status)
			w.Write([]byte(resp.body))
			return
		}

		// –ï—Å–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –∑–∞–¥–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–¥–ª—è –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤)
		w.WriteHeader(http.StatusOK)
		_, _ = w.Write([]byte(`[{"id": 7, "status": "failed", "finished_at": "2025-02-06T17:54:27.895Z", "stage": "deploy", "web_url": "https://example.com/foo/bar/-/jobs/7"}]`))
	})

	handler.HandleFunc("/api/v4/projects/1/jobs/7/play", func(w http.ResponseWriter, r *http.Request) {
		mock.mu.Lock()
		defer mock.mu.Unlock()

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500)
		if resp, exists := mock.responses[r.URL.Path]; exists {
			w.WriteHeader(resp.status)
			w.Write([]byte(resp.body))
			return
		}

		// –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
		if r.Method != http.MethodPost {
			w.WriteHeader(http.StatusMethodNotAllowed)
			w.Write([]byte(`{"error": "Method Not Allowed"}`))
			return
		}

		log.Debug().Msg("üöÄ –ú–æ–∫: –ó–∞–ø—É—Å–∫ deploy-–¥–∂–æ–±—ã job 7")

		w.WriteHeader(http.StatusOK)
		_, _ = w.Write([]byte(`{
			"id": 7,
			"name": "deploy-production",
			"stage": "deploy",
			"status": "pending",
			"created_at": "2025-02-06T20:50:00Z",
			"web_url": "https://example.com/foo/bar/-/jobs/7"
		}`))
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
	handler.HandleFunc("/", mock.handleRequest)

	mock.Server = httptest.NewServer(handler)
	return mock
}

// TriggerDeployJob - –º–æ–∫ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –¥–µ–ø–ª–æ—è
func (m *MockGitLabClient) TriggerDeployJob(ctx context.Context, jobID string) (*adapter.TriggeredJob, error) {
	if jobID == "7" {
		return &adapter.TriggeredJob{
			ID:        7,
			Name:      "deploy-production",
			Stage:     "deploy",
			Status:    "pending",
			CreatedAt: time.Now(),
			WebURL:    "https://example.com/foo/bar/-/jobs/7",
		}, nil
	}
	return nil, errors.New("job not found")
}

// handleRequest - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
func (m *MockGitLabServer) handleRequest(w http.ResponseWriter, r *http.Request) {
	m.mu.Lock()
	defer m.mu.Unlock()

	// –ï—Å–ª–∏ –¥–ª—è –ø—É—Ç–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
	if resp, exists := m.responses[r.URL.Path]; exists {
		w.WriteHeader(resp.status)
		w.Write([]byte(resp.body))
		return
	}

	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 404
	w.WriteHeader(http.StatusNotFound)
	w.Write([]byte(`{"message": "404 page not found"}`))
}

// SetErrorResponse - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—É—Ç–∏
func (m *MockGitLabServer) SetErrorResponse(path string, status int, body string) {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.responses[path] = mockResponse{status, body}
}

// SetResponse - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø—É—Ç–∏
func (m *MockGitLabServer) SetResponse(path string, status int, body string) {
	m.mu.Lock()
	defer m.mu.Unlock()
	m.responses[path] = mockResponse{status, body}
}
