package adapter

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"regexp"
	"strings"
	"time"

	"github.com/go-resty/resty/v2"
	"github.com/rs/zerolog/log"
	"github.com/vkr-mtuci/gitlab-service/config"
)

// GitLabClientInterface - –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–∫–æ–≤
type GitLabClientInterface interface {
	GetEnvironments(ctx context.Context) ([]Environment, error)
	GetEnvironmentDetails(ctx context.Context, environmentID string) (*DeploymentInfo, error)
	GetPreviousPipelineSHA(ctx context.Context, ref, currentSHA string) (string, error)
	GetCommitsBetweenSHAs(ctx context.Context, ref, fromSHA, toSHA string) ([]CommitInfo, error)
	GetPipelineJobs(ctx context.Context, pipelineID string) ([]JobInfo, error)
	TriggerDeployJob(ctx context.Context, jobID string) (*TriggeredJob, error) // ‚úÖ –ù–æ–≤—ã–π –º–µ—Ç–æ–¥
}

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ GitLabClient —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å GitLabClientInterface
var _ GitLabClientInterface = (*GitLabClient)(nil)

// GitLabClient - –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API GitLab
type GitLabClient struct {
	client      *resty.Client
	baseURL     string
	apiURL      string
	projectID   string
	jiraProject string
}

// NewGitLabClient - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è GitLab
func NewGitLabClient(cfg *config.Config) *GitLabClient {
	client := resty.New().
		SetBaseURL(cfg.GitLabBaseURL).
		SetTimeout(10*time.Second).
		SetHeader("Accept", "application/json").
		SetHeader("PRIVATE-TOKEN", cfg.GitLabAPIToken) // ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ PRIVATE-TOKEN

	log.Info().Msg("üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitLab API: " + cfg.GitLabBaseURL)

	return &GitLabClient{
		client:      client,
		baseURL:     cfg.GitLabBaseURL,
		apiURL:      cfg.GitLabAPIURL,
		projectID:   cfg.GitLabProjectID,
		jiraProject: cfg.JiraProject,
	}
}

// GetEnvironments - –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
func (g *GitLabClient) GetEnvironments(ctx context.Context) ([]Environment, error) {
	if g.projectID == "" {
		return nil, fmt.Errorf("‚ùå projectID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	url := fmt.Sprintf("%s%s%s/environments", g.baseURL, g.apiURL, g.projectID)
	log.Debug().Msgf("üì° –ó–∞–ø—Ä–æ—Å –æ–∫—Ä—É–∂–µ–Ω–∏–π GitLab: projectID=%s, URL=%s", g.projectID, url)

	resp, err := g.client.R().
		SetContext(ctx).
		Get(url)

	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–π GitLab")
		return nil, err
	}

	if resp.StatusCode() != http.StatusOK {
		log.Warn().Msgf("‚ö†Ô∏è GitLab –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode())
		return nil, ParseGitLabError(resp.Body()) // –¢–µ–ø–µ—Ä—å —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!
	}

	// –†–∞—Å–ø–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç
	var environments []Environment
	if err := json.Unmarshal(resp.Body(), &environments); err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ–∫—Ä—É–∂–µ–Ω–∏–π GitLab")
		return nil, err
	}

	log.Info().Msgf("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ %d –æ–∫—Ä—É–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ %s", len(environments), g.projectID)
	return environments, nil
}

// ParseGitLabError - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ —Å –æ—à–∏–±–∫–æ–π –æ—Ç GitLab API
func ParseGitLabError(body []byte) error {
	var gitlabErr GitLabError

	// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–æ–µ –ª–∏ —Ç–µ–ª–æ
	if len(body) == 0 {
		return fmt.Errorf("GitLab API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
	}

	// ‚úÖ –ï—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ JSON –Ω–µ—É–¥–∞—á–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–ª–æ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
	if err := json.Unmarshal(body, &gitlabErr); err != nil {
		return fmt.Errorf("GitLab API: %s", string(body))
	}

	return &gitlabErr
}

// GetEnvironmentDetails - –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
func (g *GitLabClient) GetEnvironmentDetails(ctx context.Context, environmentID string) (*DeploymentInfo, error) {
	if environmentID == "" {
		return nil, fmt.Errorf("‚ùå environmentID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	url := fmt.Sprintf("%s%s%s/environments/%s", g.baseURL, g.apiURL, g.projectID, environmentID)
	log.Debug().Msgf("üì° –ó–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏: environmentID=%s, URL=%s", environmentID, url)

	resp, err := g.client.R().
		SetContext(ctx).
		Get(url)

	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GitLab")
		return nil, err
	}

	if resp.StatusCode() != http.StatusOK {
		log.Warn().Msgf("‚ö†Ô∏è GitLab –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode())
		return nil, ParseGitLabError(resp.Body()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º ParseGitLabError
	}

	var envDetails EnvironmentDetails
	if err := json.Unmarshal(resp.Body(), &envDetails); err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ GitLab")
		return nil, err
	}

	deployment := DeploymentInfo{
		EnvironmentName: envDetails.Name,
		DeploymentDate:  envDetails.LastDeployment.CreatedAt,
		SHA:             envDetails.LastDeployment.SHA,
		Ref:             envDetails.LastDeployment.Ref,
		PipelineID:      envDetails.LastDeployment.Deployable.Pipeline.ID,
		PipelineURL:     envDetails.LastDeployment.Deployable.Pipeline.WebURL,
		JobID:           envDetails.LastDeployment.Deployable.ID,
		JobURL:          envDetails.LastDeployment.Deployable.WebURL,
		DeployStatus:    envDetails.LastDeployment.Deployable.Status,
		BuildCreatedAt:  envDetails.LastDeployment.Deployable.Pipeline.BuildDate,
	}

	// üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ª–æ–≥–∏ –¥–∂–æ–±—ã, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ BUILD_VERSION
	buildVersion, err := g.GetBuildVersion(ctx, fmt.Sprintf("%d", deployment.JobID))
	if err != nil {
		log.Warn().Err(err).Msg("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å BUILD_VERSION, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
	} else {
		deployment.BuildVersion = buildVersion
	}

	log.Info().Msgf("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—é %s", envDetails.Name)
	return &deployment, nil
}

// GetBuildVersion - –ø–æ–ª—É—á–∞–µ—Ç BUILD_VERSION –∏–∑ –ª–æ–≥–æ–≤ –¥–∂–æ–±—ã
func (g *GitLabClient) GetBuildVersion(ctx context.Context, jobID string) (string, error) {
	if jobID == "" {
		return "", fmt.Errorf("‚ùå jobID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	url := fmt.Sprintf("%s%s%s/jobs/%s/trace", g.baseURL, g.apiURL, g.projectID, jobID)
	log.Debug().Msgf("üì° –ó–∞–ø—Ä–æ—Å –ª–æ–≥–æ–≤ –¥–∂–æ–±—ã: jobID=%s, URL=%s", jobID, url)

	resp, err := g.client.R().
		SetContext(ctx).
		Get(url)

	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–æ–≤ GitLab")
		return "", err
	}

	if resp.StatusCode() != http.StatusOK {
		log.Warn().Msgf("‚ö†Ô∏è GitLab –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å %d", resp.StatusCode())
		return "", ParseGitLabError(resp.Body()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º ParseGitLabError
	}

	re := regexp.MustCompile(`(?m)^\s*BUILD_VERSION\s*=\s*(\S+)`)
	matches := re.FindStringSubmatch(string(resp.Body()))
	if len(matches) < 2 {
		return "", fmt.Errorf("‚ö†Ô∏è BUILD_VERSION –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–≥–∞—Ö")
	}

	buildVersion := strings.TrimSpace(matches[1])
	log.Info().Msgf("‚úÖ BUILD_VERSION –Ω–∞–π–¥–µ–Ω: %s", buildVersion)
	return buildVersion, nil
}

// GetPreviousPipelineSHA - –∏—â–µ—Ç SHA –ø—Ä–µ–¥—ã–¥—É—â–µ–π —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
func (g *GitLabClient) GetPreviousPipelineSHA(ctx context.Context, ref, currentSHA string) (string, error) {
	if g.projectID == "" {
		return "", fmt.Errorf("‚ùå projectID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	perPage := 100 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
	page := 1
	foundCurrent := false

	for {
		url := fmt.Sprintf("%s%s%s/pipelines?ref=%s&per_page=%d&page=%d",
			g.baseURL, g.apiURL, g.projectID, ref, perPage, page)
		log.Debug().Msgf("üì° –ó–∞–ø—Ä–æ—Å –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d): URL=%s", page, url)

		resp, err := g.client.R().
			SetContext(ctx).
			Get(url)

		if err != nil {
			log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ GitLab")
			return "", err
		}

		if resp.StatusCode() != http.StatusOK {
			return "", ParseGitLabError(resp.Body())
		}

		var pipelines []Pipeline
		if err := json.Unmarshal(resp.Body(), &pipelines); err != nil {
			log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–æ–≤ GitLab")
			return "", err
		}

		if len(pipelines) == 0 {
			break // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤—ã—Ö–æ–¥–∏–º
		}

		for _, pipeline := range pipelines {
			if pipeline.SHA == currentSHA {
				foundCurrent = true
				continue // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞–π–ø–ª–∞–π–Ω
			}
			if foundCurrent && pipeline.SHA != currentSHA {
				log.Info().Msgf("‚úÖ –ù–∞–π–¥–µ–Ω –ø—Ä–µ–¥—ã–¥—É—â–∏–π SHA: %s", pipeline.SHA)
				return pipeline.SHA, nil
			}
		}

		page++ // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
	}

	return "", fmt.Errorf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π SHA –¥–ª—è ref=%s", ref)
}

// GetCommitsBetweenSHAs - –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É SHA —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
func (g *GitLabClient) GetCommitsBetweenSHAs(ctx context.Context, ref, fromSHA, toSHA string) ([]CommitInfo, error) {
	if g.projectID == "" {
		return nil, fmt.Errorf("‚ùå projectID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	var allCommits []CommitInfo
	foundSHA := false
	perPage := 100 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
	page := 1

	for {
		url := fmt.Sprintf("%s%s%s/repository/commits?ref_name=%s&per_page=%d&page=%d",
			g.baseURL, g.apiURL, g.projectID, ref, perPage, page)
		log.Debug().Msgf("üì° –ó–∞–ø—Ä–æ—Å –∫–æ–º–º–∏—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ %d): URL=%s", page, url)

		resp, err := g.client.R().
			SetContext(ctx).
			Get(url)

		if err != nil {
			log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–º–º–∏—Ç–æ–≤ GitLab")
			return nil, err
		}

		if resp.StatusCode() != http.StatusOK {
			return nil, ParseGitLabError(resp.Body())
		}

		var commits []CommitInfo
		if err := json.Unmarshal(resp.Body(), &commits); err != nil {
			log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–º–∏—Ç–æ–≤ GitLab")
			return nil, err
		}

		if len(commits) == 0 {
			break // –ù–µ—Ç –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö
		}

		for _, commit := range commits {
			if commit.ID == toSHA {
				foundSHA = true
			}
			if commit.ID == fromSHA {
				log.Info().Msgf("‚úÖ –î–æ—Å—Ç–∏–≥–Ω—É—Ç fromSHA: %s", fromSHA)
				return allCommits, nil
			}
			if foundSHA {
				commit.JiraKeys = ExtractJiraKeys([]CommitInfo{commit}, g.jiraProject)
				allCommits = append(allCommits, commit)
			}
		}

		page++ // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
	}

	if len(allCommits) == 0 {
		return nil, fmt.Errorf("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É SHA %s –∏ %s", fromSHA, toSHA)
	}

	log.Info().Msgf("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –Ω–æ–≤—ã—Ö –∫–æ–º–º–∏—Ç–∞(–æ–≤)", len(allCommits))
	return allCommits, nil
}

// ExtractJiraKeys - –∏—â–µ—Ç Jira-–∫–ª—é—á–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∫–æ–º–º–∏—Ç–æ–≤
func ExtractJiraKeys(commits []CommitInfo, project string) []string {
	jiraRegex := regexp.MustCompile(fmt.Sprintf(`\b%s-\d+\b`, project))
	jiraKeys := make(map[string]bool)

	for _, commit := range commits {
		matches := jiraRegex.FindAllString(commit.Message, -1)
		for _, match := range matches {
			jiraKeys[match] = true
		}
	}

	uniqueKeys := make([]string, 0, len(jiraKeys))
	for key := range jiraKeys {
		uniqueKeys = append(uniqueKeys, key)
	}

	return uniqueKeys
}

// GetPipelineJobs - –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∂–æ–± –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ pipelineID
func (g *GitLabClient) GetPipelineJobs(ctx context.Context, pipelineID string) ([]JobInfo, error) {
	if pipelineID == "" {
		return nil, fmt.Errorf("‚ùå pipelineID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	url := fmt.Sprintf("%s%s%s/pipelines/%s/jobs", g.baseURL, g.apiURL, g.projectID, pipelineID)
	log.Debug().Msgf("üì° –ó–∞–ø—Ä–æ—Å –¥–∂–æ–± –ø–∞–π–ø–ª–∞–π–Ω–∞: pipelineID=%s, URL=%s", pipelineID, url)

	resp, err := g.client.R().
		SetContext(ctx).
		Get(url)

	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–∂–æ–± GitLab")
		return nil, err
	}

	if resp.StatusCode() != http.StatusOK {
		return nil, ParseGitLabError(resp.Body())
	}

	var jobs []JobInfo
	if err := json.Unmarshal(resp.Body(), &jobs); err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –¥–∂–æ–± GitLab")
		return nil, err
	}

	// –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ stage=deploy
	var deployJobs []JobInfo
	for _, job := range jobs {
		if job.Stage == "deploy" {
			deployJobs = append(deployJobs, job)
		}
	}

	log.Info().Msgf("‚úÖ –ù–∞–π–¥–µ–Ω–æ %d –¥–∂–æ–±(—ã) –≤ deploy-—Å—Ç–∞–¥–∏–∏", len(deployJobs))
	return deployJobs, nil
}

// TriggerDeployJob - –∑–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é deploy-–¥–∂–æ–±—É
func (g *GitLabClient) TriggerDeployJob(ctx context.Context, jobID string) (*TriggeredJob, error) {
	if jobID == "" {
		return nil, fmt.Errorf("‚ùå jobID –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
	}

	url := fmt.Sprintf("%s%s%s/jobs/%s/play", g.baseURL, g.apiURL, g.projectID, jobID)
	log.Debug().Msgf("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è: jobID=%s, URL=%s", jobID, url)

	resp, err := g.client.R().
		SetContext(ctx).
		Post(url)

	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è")
		return nil, err
	}

	if resp.StatusCode() != http.StatusOK {
		return nil, ParseGitLabError(resp.Body())
	}

	var triggeredJob TriggeredJob
	if err := json.Unmarshal(resp.Body(), &triggeredJob); err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ GitLab")
		return nil, err
	}

	log.Info().Msgf("‚úÖ –î–µ–ø–ª–æ–π –∑–∞–ø—É—â–µ–Ω: jobID=%s, —Å—Ç–∞—Ç—É—Å=%s", jobID, triggeredJob.Status)
	return &triggeredJob, nil
}
