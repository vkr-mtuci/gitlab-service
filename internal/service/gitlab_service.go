package service

import (
	"context"
	"time"

	"github.com/rs/zerolog/log"
	"github.com/vkr-mtuci/gitlab-service/internal/adapter"
)

// GitLabService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å GitLab API
type GitLabService struct {
	client adapter.GitLabClientInterface // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –º–æ–∫–∏—Ä–æ–≤–∞–Ω–∏—è
}

// NewGitLabService —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä GitLabService
func NewGitLabService(client adapter.GitLabClientInterface) *GitLabService {
	return &GitLabService{client: client}
}

// GetEnvironments –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
func (s *GitLabService) GetEnvironments() ([]adapter.Environment, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	environments, err := s.client.GetEnvironments(ctx)
	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏–π GitLab")
		return nil, err
	}

	log.Info().Msgf("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã %d –æ–∫—Ä—É–∂–µ–Ω–∏–π", len(environments))
	return environments, nil
}

// GetEnvironmentDetails –ø–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
func (s *GitLabService) GetEnvironmentDetails(environmentID string) (*adapter.DeploymentInfo, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if environmentID == "" {
		log.Warn().Msg("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω ID –æ–∫—Ä—É–∂–µ–Ω–∏—è")
		return nil, ErrMissingEnvironmentID
	}

	// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ–ø–ª–æ–µ —á–µ—Ä–µ–∑ –∫–ª–∏–µ–Ω—Ç
	details, err := s.client.GetEnvironmentDetails(ctx, environmentID)
	if err != nil {
		log.Error().Err(err).Msgf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—é %s", environmentID)
		return nil, err
	}

	log.Info().Msgf("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–∫—Ä—É–∂–µ–Ω–∏—é %s", environmentID)
	return details, nil
}

// ErrMissingEnvironmentID –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω ID –æ–∫—Ä—É–∂–µ–Ω–∏—è
var ErrMissingEnvironmentID = &adapter.GitLabError{
	Message: "ID –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω",
}

// GetCommitsInBuild - –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –≤ —Å–±–æ—Ä–∫–µ
func (s *GitLabService) GetCommitsInBuild(ref, currentSHA string) ([]adapter.CommitInfo, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	previousSHA, err := s.client.GetPreviousPipelineSHA(ctx, ref, currentSHA)
	if err != nil {
		log.Warn().Err(err).Msg("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–±–æ—Ä–∫—É, –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–≤–∞—è —Å–±–æ—Ä–∫–∞ –Ω–∞ —ç—Ç–æ–π –≤–µ—Ç–∫–µ")
		return nil, err
	}

	commits, err := s.client.GetCommitsBetweenSHAs(ctx, ref, previousSHA, currentSHA)
	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É —Å–±–æ—Ä–∫–∞–º–∏")
		return nil, err
	}

	return commits, nil
}

// GetDeployJobs - –ø–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∂–æ–± –≤ deploy-—Å—Ç–∞–¥–∏–∏ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞
func (s *GitLabService) GetDeployJobs(ctx context.Context, pipelineID string) ([]adapter.JobInfo, error) {
	log.Debug().Msgf("üì° –ü–æ–ª—É—á–µ–Ω–∏–µ deploy-–¥–∂–æ–± –¥–ª—è pipelineID=%s", pipelineID)

	jobs, err := s.client.GetPipelineJobs(ctx, pipelineID)
	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è deploy-–¥–∂–æ–±")
		return nil, err
	}

	return jobs, nil
}

// TriggerDeployJob - –∑–∞–ø—É—Å–∫–∞–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é deploy-–¥–∂–æ–±—É
func (s *GitLabService) TriggerDeployJob(ctx context.Context, jobID string) (*adapter.TriggeredJob, error) {
	log.Debug().Msgf("üöÄ –ó–∞–ø—É—Å–∫ deploy-–¥–∂–æ–±—ã jobID=%s", jobID)

	job, err := s.client.TriggerDeployJob(ctx, jobID)
	if err != nil {
		log.Error().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ deploy-–¥–∂–æ–±—ã")
		return nil, err
	}

	return job, nil
}
