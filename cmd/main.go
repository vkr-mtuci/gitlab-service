package main

import (
	"os"

	"github.com/gofiber/fiber/v2"
	"github.com/rs/zerolog"

	"github.com/vkr-mtuci/gitlab-service/config"
	"github.com/vkr-mtuci/gitlab-service/internal/adapter"
	"github.com/vkr-mtuci/gitlab-service/internal/handler"
	"github.com/vkr-mtuci/gitlab-service/internal/service"
)

func main() {
	// –ù–∞—Å—Ç—Ä–æ–∏–º zerolog
	output := zerolog.ConsoleWriter{Out: os.Stdout}
	logger := zerolog.New(output).With().Timestamp().Logger()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	cfg := config.LoadConfig()

	// –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–∞
	logger.Info().Msg("üì¢ –ó–∞–ø—É—Å–∫ GitLab-—Å–µ—Ä–≤–∏—Å–∞...")

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è GitLab
	gitLabClient := adapter.NewGitLabClient(cfg)

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å GitLab
	gitLabService := service.NewGitLabService(gitLabClient)

	// –°–æ–∑–¥–∞–µ–º HTTP-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	gitLabHandler := handler.NewGitLabHandler(gitLabService)

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Fiber
	app := fiber.New()

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
	app.Get("/", func(c *fiber.Ctx) error {
		return c.JSON(fiber.Map{"message": "‚úÖ GitLab-service is running"})
	})

	// ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
	app.Get("/environments", gitLabHandler.GetEnvironments)                     // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏–π
	app.Get("/environments/:id", gitLabHandler.GetEnvironmentDetails)           // –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
	app.Get("/commits/:ref/:sha", gitLabHandler.GetCommitsInBuild)              // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–º–∏—Ç—ã —Å–±–æ—Ä–∫–∏
	app.Get("/pipelines/:pipeline_id/deploy-jobs", gitLabHandler.GetDeployJobs) // –ü–æ–ª—É—á–∏—Ç—å deploy-–¥–∂–æ–±—ã
	app.Post("/jobs/:job_id/play", gitLabHandler.TriggerDeployJob)              // ‚úÖ –ó–∞–ø—É—Å–∫ deploy-–¥–∂–æ–±—ã

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	logger.Info().Msgf("üöÄ –°–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s", cfg.ServerPort)
	err := app.Listen(":" + cfg.ServerPort)
	if err != nil {
		logger.Fatal().Err(err).Msg("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
	}
}
